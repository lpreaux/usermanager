services:
  app:
    build:
      target: final
    # Pas de container_name fixe en mode replicas
    # container_name: user-manager-app-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      # Configuration optimisée pour la production
      JAVA_OPTS: "-Xms512m -Xmx1g -XX:+UseG1GC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/java_heap_dump.hprof"
      # Sentry avec échantillonnage réduit
      SENTRY_TRACES_SAMPLE_RATE: 0.1
      # Configuration des feature flags
      FEATURE_FLAGS_DEFAULT_ENABLED: "false"
    deploy:
      replicas: 2  # Haute disponibilité avec plusieurs instances
      update_config:
        parallelism: 1  # Mise à jour progressive
        delay: 10s
        order: start-first  # Démarrer le nouveau conteneur avant d'arrêter l'ancien
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-batch-size: "400"
        loki-external-labels: "job=user-manager,environment=production"

  db:
    container_name: user-manager-db-prod
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    command: --innodb-buffer-pool-size=512M --innodb-flush-log-at-trx-commit=2 --max-connections=200
    # Limiter l'accès direct à la base de données en production
    ports: []

  # Désactiver Adminer en production
  adminer:
    profiles: ["non-prod"]

  # Service de backup pour la production
  backup:
    image: fradelg/mysql-cron-backup
    container_name: user-manager-backup-prod
    depends_on:
      - db
    volumes:
      - ./backups:/backup
      - /mnt/backup-nfs:/remote-backup  # Montage NFS pour stockage externe
    environment:
      - MYSQL_HOST=db
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASS=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - CRON_TIME=0 */6 * * *  # Toutes les 6 heures
      - MAX_BACKUPS=14  # Conserver deux semaines de backups
      - COMPRESSION_LEVEL=9  # Compression maximale
      - BACKUP_SUFFIX=production
      - BACKUP_NUM_PREFIX=%Y%m%d-%H%M
    command: |
      sh -c '
        /entrypoint.sh &
        while true; do
          if [ -d "/backup" ] && [ -d "/remote-backup" ]; then
            find /backup -name "*.sql.gz" -type f -mtime -1 -exec cp {} /remote-backup/ \;
            echo "$(date): Copied recent backups to remote storage" >> /var/log/backup-sync.log
          fi
          sleep 3600
        done
      '
    networks:
      - user-manager-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M

  # Load Balancer et Reverse Proxy pour la production
  nginx:
    image: nginx:alpine
    container_name: user-manager-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - user-manager-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

# Utiliser le même réseau pour tous les services
networks:
  user-manager-network:
    # Utiliser le même réseau que dans docker-compose.yml
    name: ${NETWORK_NAME:-user-manager-network-prod}
    # Ne pas créer un deuxième réseau
    external: false

volumes:
  mariadb-data:
    name: ${VOLUME_PREFIX:-prod-}mariadb-data