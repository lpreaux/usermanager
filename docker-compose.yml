services:
  app:
    build:
      context: ./backend  # Mise à jour du chemin
    environment:
      # Variables d'environnement communes
      SPRING_DATASOURCE_URL: jdbc:mariadb://db:3306/user_manager
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-user_manager}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-user_manager_password}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_FLYWAY_ENABLED: true
      # Configuration Sentry
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${SPRING_PROFILES_ACTIVE:-dev}
      # Configuration PostHog
      POSTHOG_API_KEY: ${POSTHOG_API_KEY}
      POSTHOG_HOST: ${POSTHOG_HOST:-https://eu.i.posthog.com}
      POSTHOG_ENABLED: ${POSTHOG_ENABLED:-true}
      POSTHOG_ENVIRONMENT: ${SPRING_PROFILES_ACTIVE:-dev}
      # Feature Flags
      FEATURE_FLAGS_ENABLED: ${FEATURE_FLAGS_ENABLED:-true}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - user-manager-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: "curl --fail http://localhost:8080/actuator/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: mariadb:11.0
    container_name: user-manager-db
    environment:
      - MARIADB_DATABASE=${DB_NAME:-user_manager}
      - MARIADB_USER=${DB_USER:-user_manager}
      - MARIADB_PASSWORD=${DB_PASSWORD:-user_manager_password}
      - MARIADB_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-root_password}
    volumes:
      - mariadb-data:/var/lib/mysql
      - ./backend/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d  # Mise à jour du chemin
    networks:
      - user-manager-network
    restart: unless-stopped
    healthcheck:
      test: "healthcheck.sh --connect --innodb_initialized && mariadb -h localhost -u ${DB_USER:-user_manager} -p${DB_PASSWORD:-user_manager_password} -e 'SELECT 1' ${DB_NAME:-user_manager}"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  adminer:
    image: adminer:latest
    container_name: user-manager-adminer
    environment:
      - ADMINER_DEFAULT_SERVER=db
    ports:
      - "8081:8080"
    networks:
      - user-manager-network
    restart: unless-stopped
    depends_on:
      - db

  redis:
    image: redis:alpine
    container_name: user-manager-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - user-manager-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  user-manager-network:
    name: ${NETWORK_NAME:-user-manager-network}

volumes:
  mariadb-data:
    name: ${VOLUME_PREFIX:-}mariadb-data
  redis-data: