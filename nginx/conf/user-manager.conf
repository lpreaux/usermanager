server {
    listen 80;
    server_name user-manager.example.com;

    # Redirection vers HTTPS
    location / {
        return 301 https://$host$request_uri;
    }

    # Endpoint health pour les vérifications de santé sur HTTP
    location /health {
        access_log off;
        return 200 'OK';
        add_header Content-Type text/plain;
    }
}

server {
    listen 443 ssl http2;
    server_name user-manager.example.com;

    # Certificats SSL
    ssl_certificate /etc/nginx/ssl/user-manager.crt;
    ssl_certificate_key /etc/nginx/ssl/user-manager.key;

    # Configuration SSL optimisée
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # HSTS (15768000 secondes = 6 mois)
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;

    # Autres headers de sécurité
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    # Logs
    access_log /var/log/nginx/user-manager.access.log;
    error_log /var/log/nginx/user-manager.error.log;

    # Configuration pour les feature flags via PostHog
    # Transmettre les entêtes d'identification pour les feature flags
    proxy_set_header X-Feature-Flags-User $http_x_feature_flags_user;
    proxy_set_header X-Feature-Flags-Group $http_x_feature_flags_group;

    # Chemin de base de l'application
    location / {
        proxy_pass http://app:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout settings
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        send_timeout 300;
    }

    # Configuration spéciale pour les feature flags
    # Cette approche permet de tester différentes variations via des paramètres d'URL
    location /api/ {
        # Capture des paramètres de feature flags dans les URLs
        # Exemple: /api/users?ff_new_ui=true
        if ($arg_ff_new_ui) {
            set $feature_new_ui $arg_ff_new_ui;
            add_header X-Feature-Flag-New-UI $feature_new_ui;
        }

        # Transmission des paramètres de feature flags
        proxy_set_header X-Feature-New-UI $feature_new_ui;

        proxy_pass http://app:8080/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        # Cache avec variation par feature flag
        # Les différentes versions d'une page (avec/sans feature) sont cachées séparément
        proxy_cache_key "$scheme$proxy_host$request_uri$feature_new_ui";

        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;

        # Cache pour certains endpoints d'API en lecture seule
        location ~ ^/api/v1/users/[^/]+$ {
            proxy_pass http://app:8080;
            proxy_cache api_cache;
            proxy_cache_valid 200 2m;  # Cache valide 2 minutes
            proxy_cache_methods GET HEAD;
            # Inclure les feature flags dans la clé de cache
            proxy_cache_key "$scheme$proxy_host$request_uri$http_x_feature_flags_user";
            add_header X-Cache-Status $upstream_cache_status;
        }
    }

    # Endpoint de management pour Prometheus et actuators
    location /management/ {
        # Restriction d'accès par IP
        allow 10.0.0.0/8;     # Réseau interne
        allow 172.16.0.0/12;  # Réseau Docker
        deny all;

        # Authentification basique pour un niveau de sécurité supplémentaire
        auth_basic "Restricted Management Access";
        auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

        proxy_pass http://app:8080/management/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # Endpoint spécifique pour les feature flags (pour les applications frontend)
    location /feature-flags/ {
        proxy_pass http://app:8080/api/v1/feature-flags/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;

        # Cache court pour les feature flags (5 secondes)
        proxy_cache feature_flags_cache;
        proxy_cache_valid 200 5s;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Endpoint de santé pour les healthchecks
    location /health {
        access_log off;
        return 200 'OK';
        add_header Content-Type text/plain;
    }

    # Favicon et assets statiques
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        proxy_pass http://app:8080;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
    }
}

# Configuration pour le rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# Configuration de cache
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=60m;
proxy_cache_path /var/cache/nginx/feature_flags levels=1:2 keys_zone=feature_flags_cache:1m max_size=10m inactive=1m;